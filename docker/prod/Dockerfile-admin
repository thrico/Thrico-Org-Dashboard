# 1️⃣ Base image with Node + pnpm + turbo
FROM node:20-alpine AS base
RUN apk add --no-cache libc6-compat
RUN corepack enable && corepack prepare pnpm@latest --activate
RUN yarn global add turbo
WORKDIR /app

# 2️⃣ Builder stage: isolate and install only what's needed
FROM base AS builder
COPY . .
RUN turbo prune --scope=admin --docker

# 3️⃣ Installer stage: install only pruned dependencies
FROM base AS installer
WORKDIR /app
COPY --from=builder /app/out/json/ .
COPY --from=builder /app/out/pnpm-lock.yaml ./pnpm-lock.yaml
# COPY .gitignore .gitignore
RUN pnpm install --frozen-lockfile

# 4️⃣ Build stage
FROM installer AS builder-app
COPY --from=builder /app/out/full/ .
RUN pnpm build --filter=admin...

# 5️⃣ Runtime stage (slim)
FROM node:20-alpine AS runner
WORKDIR /app
RUN addgroup --system --gid 1001 nodejs && \
    adduser --system --uid 1001 nextjs

COPY --from=builder-app --chown=nextjs:nodejs /app/apps/admin/.next/standalone ./
COPY --from=builder-app --chown=nextjs:nodejs /app/apps/admin/.next/static ./apps/admin/.next/static
COPY --from=builder-app --chown=nextjs:nodejs /app/apps/admin/public ./apps/admin/public

USER nextjs
EXPOSE 20241
ENV PORT 20241
ENV HOSTNAME 0.0.0.0

CMD ["node", "apps/admin/server.js"]
